# Notes about device here
substitutions:
  name: ir-remote
  friendly_name: IR-Remote
  device_description: Universal WiFi IR Blaster Remote
  hardware_info: "TYSW-ESP8266"
#### The Project information is required for adoption to work in the Dashboard. ####
  project_name: "SBInovations.IR-Remote" # "Name.What_ever_you_want" # example: "Sonoff.S31_ESP8266_1M_CSE7766" must follow that format: word.word_word_word
  project_version: "0.0.1"

# This should point to the public location of this yaml file.
dashboard_import:
  package_import_url: github://esphome/esphome-project-template/project-template-esp32.yaml@v6
  import_full_config: true

esphome:
  name: ${name}
  friendly_name: "${friendly_name}"
  comment: "${device_description}"
  name_add_mac_suffix: true
  project:
    name: ${project_name}
    version: ${project_version}

time:
  - platform: sntp
    id: time_sntp
    timezone: "America/Toronto"


######## Diagnostics ##########

text_sensor:
  - platform: template
    name: Hardware Info
    entity_category: diagnostic
    update_interval: 24h
    lambda: return {"$hardware_info"};
  - platform: version
    name: ESPHome Version
  - platform: wifi_info
    ip_address:
      name: IP Address
    ssid:
      name: SSID  
    bssid:
      name: BSSID
    # scan_results:
    #   name: Wifi Latest Scan Results 

sensor:
  - platform: uptime
    name: Uptime
    id: sys_uptime
    update_interval: 60s
    entity_category: "diagnostic"

  - platform: wifi_signal
    name: Signal
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"

button:
  - platform: restart
    name: Reboot
    icon: mdi:power-cycle
    entity_category: diagnostic
  - platform: safe_mode
    name: "Safe Mode"
    entity_category: diagnostic

binary_sensor:
  - platform: status
    name: Online Status
    id: ink_ha_connected
    entity_category: "diagnostic"

debug:


####### Networking ###############
# API is a requirement of the dashboard import.
api:

# OTA is required for Over-the-Air updating
ota:
  platform: esphome
  password: ${name}
  id: my_ota

captive_portal:

wifi:
  # Set up a wifi access point
  ap:
    ssid: ${friendly_name}
    password: "12345678"

web_server:
  port: 80
  # auth:
  #   username: admin
  #   password: !secret web_server_password


########### Set device attributes #########
esphome:
  platform: ESP8266
  board: esp01_1m

# Enable logging without UART support as there would be no way to read it
logger:
  baud_rate: 0

# Enable external blue LED as a status indictator
status_led:
  pin:
    number: GPIO4

# Enable the IR receiver to dump all IR commands to the log. Change dump type to your capture remote type. Use the captured IR command to replicate that IR command. You can disable this part when you aren't capturing IR command data.
remote_receiver:
  pin:
    number: GPIO5
    inverted: true
  dump: all

# Enable the remote transmitter
remote_transmitter:
  pin: GPIO14
  carrier_duty_percent: 50%

# Enable the underside button.
binary_sensor:
  - platform: gpio
    pin:
      number: GPIO13
      inverted: true
    name: Underside Button

######## Examples ###########

# Simple example template switch to control the power of a Samsung TV using IR commands
switch:
  - platform: template
    name: "TV Power"
    optimistic: true
    assumed_state: true
    turn_on_action:
      # Data would be the IR command captured in the log by the remote receiver
      - remote_transmitter.transmit_samsung:
          data: 0xE0E09966
    turn_off_action:
      # Data would be the IR command captured in the log by the remote receiver
      - remote_transmitter.transmit_samsung:
          data: 0xE0E019E6

button:
  - platform: template
    name: Logitech Vol Up
    on_press:
      - remote_transmitter.transmit_nec:
          address: 0xF708
          command: 0xE51A

  - platform: template
    name: Logitech Vol Dw
    on_press:
      - remote_transmitter.transmit_nec:
          address: 0xF708
          command: 0xF10E
