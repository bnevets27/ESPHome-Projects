# This device is using a esp01_1m with 1mb of flash. To be able to update OTA the compiled firmware must not exceed 50% (500kb)
# therefor this has been stripped down to make this small enough to allow OTA
# If there because a space issue, then more parts can be removed.
# The other option is to serial flash but that's a slight pain due to having to update this code with the leanred IR codes
esphome:
  name: ir-remote
  friendly_name: "IR-Remote -"
  comment: "Universal WiFi IR Blaster Remote"
  name_add_mac_suffix: true
  project:
    name: "Tuya-SBI.IR-Remote"
    version: "0.0.1"
### Device Sepcific ###
  platform: ESP8266
  board: esp01_1m

# This should point to the public location of this yaml file.
dashboard_import:
  package_import_url: github://bnevets27/ESPHome-Projects/devices/oem/globe-ir-remote-share.yaml@main
  import_full_config: true

######## Diagnostics ##########
text_sensor:
  - platform: version
    name: "ESPHome Version"
  - platform: wifi_info
    ip_address:
      name: "ESP IP Adress"
      icon: mdi:ip-network-outline
    ssid:
      name: "AP SSID"
      icon: mdi:access-point
    bssid:
      name: "AP MAC Address"
      icon: mdi:access-point

sensor:
  - platform: uptime
    name: "Uptime"
    id: sys_uptime
    update_interval: 60s
    entity_category: "diagnostic"

  - platform: wifi_signal
    name: "Signal"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"

debug:

####### Networking ###############
# API is a requirement of the dashboard import.
api:

# OTA is required for Over-the-Air updating
ota:
  - platform: esphome

captive_portal:

wifi:
  ap:

web_server:
  port: 80


########### Set device attributes #########
# Enable logging without UART support as there would be no way to read it
logger:
  baud_rate: 0

# Enable external blue LED as a status indictator
status_led:
  pin:
    number: GPIO4

# Enable the IR receiver to dump all IR commands to the log. Change dump type to your capture remote type. Use the captured IR command to replicate that IR command. You can disable this part when you aren't capturing IR command data.
remote_receiver:
  id: my_remote
  pin:
    number: GPIO5
    inverted: true
  dump: all

# Enable the remote transmitter
remote_transmitter:
  pin: GPIO14
  carrier_duty_percent: 50%

# Enable the underside button.
binary_sensor:
### Generic ###  
  - platform: status
    name: Online Status
    id: ink_ha_connected
    entity_category: "diagnostic"
### Device Specific ###  
  - platform: gpio
    pin:
      number: GPIO13
      inverted: true
    name: "Underside Button"
    id: underside_button
    disabled_by_default: true
    on_click:
      min_length: 15s
      max_length: 60s
      then:
        button.press: factory_reset_all

switch:
######## Examples ########### 
# Simple example template switch to control the power of a Samsung TV using IR commands
  - platform: template
    name: "TV Power"
    optimistic: true
    assumed_state: true
    turn_on_action:
      # Data would be the IR command captured in the log by the remote receiver
      - remote_transmitter.transmit_samsung:
          data: 0xE0E09966
    turn_off_action:
      # Data would be the IR command captured in the log by the remote receiver
      - remote_transmitter.transmit_samsung:
          data: 0xE0E019E6

button:
### Generic ###  
  - platform: restart
    name: "Reboot"
    icon: mdi:power-cycle
    entity_category: diagnostic
  - platform: factory_reset
    name: "Factory Reset - Wipe All"
    disabled_by_default: true
    id: factory_reset_all
    icon: mdi:delete-forever
    entity_category: diagnostic
### Device Specific ###
### Put Leared Codes Here ###
######## Examples ########### 
  - platform: template
    name: Logitech Vol Up
    on_press:
      - remote_transmitter.transmit_nec:
          address: 0xF708
          command: 0xE51A

  - platform: template
    name: Logitech Vol Dw
    on_press:
      - remote_transmitter.transmit_nec:
          address: 0xF708
          command: 0xF10E
