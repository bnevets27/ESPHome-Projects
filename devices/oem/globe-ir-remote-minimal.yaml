esphome:
  name: ir-remote
  friendly_name: IR-Remote
  comment: Universal WiFi IR Blaster Remote
  platform: ESP8266
  board: esp01_1m

# Enable Wi-Fi connection
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:

# Enable captive poral
captive_portal:

# Enable websever
web_server:
  port: 80

# Enable HomeAssistant API
api:

# Enable OTA updates
ota:
  - platform: esphome

# Enable logging without UART support as there would be no way to read it
logger:
  baud_rate: 0

# Enable external blue LED as a status indictator
status_led:
  pin:
    number: GPIO4

# Enable the IR receiver to dump all IR commands to the log. Change dump type to your capture remote type. Use the captured IR command to replicate that IR command. You can disable this part when you aren't capturing IR command data.
remote_receiver:
  pin:
    number: GPIO5
    inverted: true
  dump: all

# Enable the remote transmitter
remote_transmitter:
  pin: GPIO14
  carrier_duty_percent: 50%

# Enable the underside button.
binary_sensor:
  - platform: gpio
    pin:
      number: GPIO13
      inverted: true
    name: Underside Button

switch:
### Put Leared Codes Here ###
######## Examples ########### 
  - platform: template
    name: "TV Power"
    optimistic: true
    assumed_state: true
    turn_on_action:
      # Data would be the IR command captured in the log by the remote receiver
      - remote_transmitter.transmit_samsung:
          data: 0xE0E09966
    turn_off_action:
      # Data would be the IR command captured in the log by the remote receiver
      - remote_transmitter.transmit_samsung:
          data: 0xE0E019E6

button:
### Put Leared Codes Here ###
######## Examples ########### 
  - platform: template
    name: Logitech Vol Up
    on_press:
      - remote_transmitter.transmit_nec:
          address: 0xF708
          command: 0xE51A
  - platform: template
    name: Logitech Vol Dw
    on_press:
      - remote_transmitter.transmit_nec:
          address: 0xF708
          command: 0xF10E
